name: CI/CD Pipeline with Security Scan and Deploy

# Kích hoạt workflow khi có push hoặc pull request vào nhánh main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-scan-push-deploy:
    runs-on: ubuntu-latest # Chạy job trên máy ảo Ubuntu mới nhất của GitHub

    steps:
      # Bước 1: Checkout mã nguồn từ repository
      - name: Checkout code
        uses: actions/checkout@v4 # Sử dụng action chính thức để checkout code

      # Bước 2: Build Docker image
      - name: Build Docker image
        run: docker build -t my-web-app . # Build image từ Dockerfile và đặt tên là my-web-app [source: 15]

      # Bước 3: Kiểm tra bảo mật Docker image với Trivy
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master # Sử dụng action chính thức của Trivy
        with:
          image-ref: 'my-web-app' # Chỉ định image cần scan
          format: 'table' # Định dạng output (có thể là 'json', 'sarif')
          exit-code: '0' # Không fail pipeline nếu tìm thấy lỗ hổng (có thể đổi thành '1' để fail nếu có HIGH,CRITICAL)
          ignore-unfixed: true # Bỏ qua các lỗ hổng chưa có bản vá
          vuln-type: 'os,library' # Loại lỗ hổng cần scan
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN' # Mức độ nghiêm trọng cần báo cáo

      # Bước 4: Đăng nhập vào Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Lấy username từ GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # Lấy password từ GitHub Secrets [source: 17]

      # Bước 5: Tag và Đẩy image lên Docker Hub (Chỉ thực hiện khi push vào nhánh main)
      - name: Tag and Push image to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Chỉ chạy khi push vào main
        run: |
          IMAGE_NAME="dongmt2/my-web-app" # Thay bằng username/tên_image của bạn trên Docker Hub
          # Gắn tag cho image
          docker tag my-web-app $IMAGE_NAME:latest
          # Đẩy image lên Docker Hub
          docker push $IMAGE_NAME:latest
          echo "Image pushed to $IMAGE_NAME:latest"
        # [source: 18] - Lưu ý: Nên cân nhắc sử dụng tag theo commit hash hoặc version thay vì chỉ 'latest' cho production

      # Bước 6: Deploy lên DigitalOcean Droplet qua SSH (Chỉ thực hiện khi push vào nhánh main)
      - name: Deploy to Production Server
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Chỉ chạy khi push vào main
        uses: appleboy/ssh-action@master # Action để thực thi lệnh SSH
        with:
          host: ${{ secrets.SSH_HOST }}             # IP hoặc hostname của Droplet (từ GitHub Secrets)
          username: ${{ secrets.SSH_USERNAME }}     # Username đăng nhập SSH (từ GitHub Secrets)
          key: ${{ secrets.SSH_PRIVATE_KEY }}       # Private key SSH (từ GitHub Secrets)
          script: |
            IMAGE_NAME="dongmt2/my-web-app:latest" # Thay username/tên_image của bạn
            CONTAINER_NAME="my-running-app" # Tên bạn muốn đặt cho container đang chạy

            echo "Pulling latest image: $IMAGE_NAME"
            docker pull $IMAGE_NAME

            echo "Stopping existing container: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || true # Dừng container cũ (|| true để không báo lỗi nếu chưa có)

            echo "Removing existing container: $CONTAINER_NAME"
            docker rm $CONTAINER_NAME || true # Xóa container cũ (|| true để không báo lỗi nếu chưa có)

            echo "Starting new container: $CONTAINER_NAME from $IMAGE_NAME"
            docker run -d -p 80:80 --name $CONTAINER_NAME --restart=always $IMAGE_NAME

            echo "Deployment successful!"

            # (Tùy chọn) Xóa image cũ không dùng đến
            docker image prune -af
